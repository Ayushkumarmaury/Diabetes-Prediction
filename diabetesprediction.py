# -*- coding: utf-8 -*-
"""DiabetesPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n28FNYUkAkky6fffOSr7wREZiAVKAbnC

importing dependencies
"""

#importing dependencies
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""data collection and analysis"""

# loading the dataset to pandas dataframe
diabetes_dataset = pd.read_csv("/content/diabetes.csv")

"""printing first 5 rows of dataset"""

#printing first 5 rows of dataset
diabetes_dataset.head()

#no. of rows and colums in this dataset
diabetes_dataset.shape

#gettting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

#level 0 - non-Diabetic
#level 1 - diabetic
diabetes_dataset.groupby('Outcome').mean()

#seprating data and labels
x = diabetes_dataset.drop(columns= 'Outcome', axis=1)
y = diabetes_dataset['Outcome']

print(x)

print(y)

#data Standardiztion
scaler = StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

print(standardized_data)

x = standardized_data
y = diabetes_dataset['Outcome']

print(x)
print(y)

#train test Split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

#training the model
classifier = svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(x_train, y_train)

#model evaluation
#accuracy score on the training data
x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

#accuracy score on the training data
x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

#making predictive system
input_data = (1,103,30,38,83,43.3,0.183,33)

#changing the input data to a numpyarray
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

